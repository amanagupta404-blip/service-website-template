---
/**
 * Base Layout
 * Main layout wrapper for all pages with SEO, theme support, and accessibility
 *
 * Props:
 * - title: Page title
 * - description: Meta description (optional)
 * - bodyClass: Additional CSS classes for body element (optional)
 */

import SkipLink from '@components/layout/SkipLink.astro';
import Header from '@/components/layout/Header.svelte';
import Footer from '@/components/layout/Footer.svelte';
import '@styles/design-tokens.css';
import '@styles/global.css';

interface Props {
  title: string;
  description?: string;
  bodyClass?: string;
}

const { title, description, bodyClass = '' } = Astro.props;
const siteTitle = title ? `${title} | Service Website Template` : 'Service Website Template';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    {description && <meta name="description" content={description} />}
    <title>{siteTitle}</title>

    <!-- FOUC Prevention: Load theme before content renders -->
    <script is:inline>
      /**
       * Theme initialization script
       * Runs synchronously before page render to prevent flash of unstyled content
       *
       * Priority order:
       * 1. User's explicit theme choice (localStorage)
       * 2. System preference (light/dark mode)
       * 3. Default theme (earthy-serenity)
       */

      (function () {
        // Key for localStorage
        const STORAGE_KEY = 'theme-preference';

        // Get stored theme preference
        const getStoredTheme = () => {
          try {
            return localStorage.getItem(STORAGE_KEY);
          } catch (e) {
            return null;
          }
        };

        // Detect system color scheme preference
        const getSystemTheme = () => {
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'galactic-night'; // Default dark theme
          }
          return 'earthy-serenity'; // Default light theme
        };

        // Apply theme to document
        const applyTheme = (themeId) => {
          document.documentElement.setAttribute('data-theme', themeId);

          // Set color-scheme meta for browser UI
          const colorScheme = [
            'galactic-night',
            'midnight-retro',
            'electric-neon',
            'twilight-pastels',
          ].includes(themeId)
            ? 'dark'
            : 'light';

          let metaColorScheme = document.querySelector('meta[name="color-scheme"]');
          if (!metaColorScheme) {
            metaColorScheme = document.createElement('meta');
            metaColorScheme.setAttribute('name', 'color-scheme');
            document.head.appendChild(metaColorScheme);
          }
          metaColorScheme.setAttribute('content', colorScheme);
        };

        // Initialize theme
        const storedTheme = getStoredTheme();
        const themeId = storedTheme || getSystemTheme();
        applyTheme(themeId);

        // Listen for system theme changes
        window
          .matchMedia('(prefers-color-scheme: dark)')
          .addEventListener('change', (e) => {
            // Only apply system preference if user hasn't set explicit theme
            if (!getStoredTheme()) {
              const systemTheme = e.matches ? 'galactic-night' : 'earthy-serenity';
              applyTheme(systemTheme);
            }
          });

        // Listen for theme changes from other tabs (cross-tab sync)
        window.addEventListener('storage', (e) => {
          if (e.key === STORAGE_KEY && e.newValue) {
            applyTheme(e.newValue);
          }
        });
      })();
    </script>
  </head>
  <body class={bodyClass}>
    <SkipLink />

    <!-- Site Grid Structure (Phase 3.2) -->
    <div class="site-grid">
      <!-- Header with Navigation (Phase 3.3 + 3.4) -->
      <Header currentPath={Astro.url.pathname} sticky={true} client:load />

      <!-- Main Content Area -->
      <main id="main-content" role="main" tabindex="-1">
        <slot />
      </main>

      <!-- Footer (Phase 3.5) -->
      <Footer />
    </div>
  </body>
</html>

<style>
  /**
   * CSS Grid Site Structure (Phase 3.2)
   * 3-row grid: header (auto), main (1fr - expands), footer (auto)
   * Ensures footer sticks to bottom even on short pages
   */
  .site-grid {
    display: grid;
    grid-template-rows: auto 1fr auto;
    min-height: 100vh;
  }

  /**
   * Main content area
   * tabindex="-1" allows programmatic focus for skip link
   */
  main:focus {
    outline: none;
  }
</style>
